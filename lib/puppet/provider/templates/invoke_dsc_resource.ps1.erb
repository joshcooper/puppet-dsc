$script:ErrorActionPreference = 'Stop'
$script:WarningPreference     = 'SilentlyContinue'

$response = @{
  indesiredstate = $false
  rebootrequired = $false
  errormessage   = ''
}

$currentState = Get-DscLocalConfigurationManager

if ($currentState.RefreshMode -ne 'Disabled') {
  $response.errormessage = "DSC LCM RefreshMode must be set to Disabled for Puppet to execute DSC Resources! Please run dsc::lcm_config first"
  return ($response | ConvertTo-Json -Compress)
}

$invokeParams = @{
  Name          = '<%= resource[:dscmeta_resource_friendly_name] %>'
  Method        = '<%= dsc_invoke_method %>'
  Property      = @{
<% dsc_parameters.each do |p| -%>
    <%- name = p.name.to_s.gsub(/^dsc_/,'')
    value = format_dsc_value(p.value)
    value = "'#{resource.provider.ensure_value}'" if name == 'ensure' && dsc_invoke_method == 'test'
    -%>
    <%= name %> = <%= value %>
<% end -%>
  }<% if resource.parameters[:dscmeta_module_version] %>
  ModuleName = @{
    ModuleName      = <%= "\"#{resource[:dscmeta_module_name]}\"" %>
    RequiredVersion = <%= "\"#{resource[:dscmeta_module_version]}\"" %>
  }
<% else %>
  ModuleName = <%= "\"#{resource[:dscmeta_module_name]}\"" %>
<% end -%>
}

try{
    $result = Invoke-DscResource @invokeParams
}catch{
  $response.errormessage   = $_.Exception.Message
  return ($response | ConvertTo-Json -Compress)
}

# keep the switch for when Test passes back changed properties
switch ($invokeParams.Method) {
  'Test' {
    $response.indesiredstate = $result.InDesiredState
    return ($response | ConvertTo-Json -Compress)
  }
  'Set' {
    $response.indesiredstate = $true
    $response.rebootrequired = $result.RebootRequired
    return ($response | ConvertTo-Json -Compress)
  }
}
